// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace OpenGlSpecGen.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using OpenGlSpecGen;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class GlBindingTemplate : GlBindingTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("using System;\r\nusing System.Runtime.CompilerServices;\r\nusing System.Runtime.Inter" +
                    "opServices;\r\nusing System.Security;\r\n\r\nnamespace ");
            
            #line 12 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FileNamespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n");
            
            #line 14 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"

	if (Class != null)
	{
		Class.Sort ( (a, b) => a.Name.CompareTo(b.Name) );
		foreach (var item in Class)
		{
			WriteClass(item);
		}
	}
	if (Enums != null)
	{
		Enums.Sort ( (a, b) => a.Name.CompareTo(b.Name) );
		foreach (var _enum in Enums)
		{
			WriteEnum(_enum );
		}
	}

            
            #line default
            #line hidden
            this.Write("}\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 34 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"

protected void WriteClass(ClassInfo classInfo)
{
	Begin(classInfo.Accessor, classInfo.Type, classInfo.Name);
	
	classInfo.Enums.Sort ( (a, b) => a.Name.CompareTo(b.Name) );
	classInfo.Commands.Sort (
		(a, b) => (a.Method.Name + a.Command.Prototype.Declaration.Name)
		.CompareTo ( b.Method.Name + b.Command.Prototype.Declaration.Name )
	);

	foreach (var _enum in classInfo.Enums)
	{
		WriteEnum(_enum );
	}

	this.PushIndent("	");

	if ( classInfo.Group != null && classInfo.Group.SpecGroup.isExtension )
	{

        
        #line default
        #line hidden
        
        #line 54 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write("public const string NAME_STRING = \"");

        
        #line default
        #line hidden
        
        #line 55 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(classInfo.Group.SpecGroup.Name));

        
        #line default
        #line hidden
        
        #line 55 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write("\";\r\n");

        
        #line default
        #line hidden
        
        #line 56 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"

	}

	if(classInfo.Commands.Count > 0)
	{

        
        #line default
        #line hidden
        
        #line 61 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write("#region command delegates\r\n");

        
        #line default
        #line hidden
        
        #line 63 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"

		foreach (var cmd in classInfo.Commands)
		{
			WriteCommandDelegate(cmd);
		}

        
        #line default
        #line hidden
        
        #line 68 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write("#endregion // command delegates\r\n#region commands\r\n");

        
        #line default
        #line hidden
        
        #line 71 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"


		foreach (var cmd in classInfo.Commands)
		{
			WriteCommand(cmd);
		}

        
        #line default
        #line hidden
        
        #line 77 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write("#endregion // commands\r\n");

        
        #line default
        #line hidden
        
        #line 79 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"


        
        #line default
        #line hidden
        
        #line 80 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write("public ");

        
        #line default
        #line hidden
        
        #line 81 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(classInfo.Name));

        
        #line default
        #line hidden
        
        #line 81 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write(" (IHandleResolver resolver)\r\n{\r\n\tif (resolver == null) throw new ArgumentNullExce" +
        "ption (\"resolver\");\r\n");

        
        #line default
        #line hidden
        
        #line 84 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"

		this.PushIndent("	");
		foreach (var cmd in classInfo.Commands)
		{
			WriteLoadCommandDelegate(cmd);
		}
		this.PopIndent();

        
        #line default
        #line hidden
        
        #line 91 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write("}\r\n");

        
        #line default
        #line hidden
        
        #line 93 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"

	}

	this.PopIndent();

	if (classInfo.SubClasses != null)
	{
		classInfo.SubClasses.Sort ( (a, b) => a.Name.CompareTo ( b.Name ) );
		foreach (var cls in classInfo.SubClasses)
		{
			WriteClass(cls);
		}
	}

	End();
}
protected void WriteEnum(EnumClassInfo info)
{
	Begin(info.Accessor, info.Type, info.Name);
	
	this.PushIndent("	");
	foreach (var cmd in info.Values.Values.OrderBy( (a)=>a.Value.Value ))
	{
		WriteEnumElement(cmd);
	}
	this.PopIndent();

	End();
}

        
        #line default
        #line hidden
        
        #line 125 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"

/*
	/// <summary>
	/// 
	/// </summary>
	[Flags]
	public enum MyEnum : int
	{
		/// <summary>
		/// 
		/// </summary>
		Muh = 0,
	}
*/

protected void WriteEnumElement(EnumElementInfo info)
{

        
        #line default
        #line hidden
        
        #line 142 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write("// ");

        
        #line default
        #line hidden
        
        #line 143 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(info.Value.Name));

        
        #line default
        #line hidden
        
        #line 143 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write(" = 0x");

        
        #line default
        #line hidden
        
        #line 143 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(info.Value.Value.ToString("X")));

        
        #line default
        #line hidden
        
        #line 143 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write("\r\n");

        
        #line default
        #line hidden
        
        #line 144 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"

	if (info.Alias != null)
	{
		foreach(var item in info.Alias)
		{

        
        #line default
        #line hidden
        
        #line 149 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write("// ");

        
        #line default
        #line hidden
        
        #line 150 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));

        
        #line default
        #line hidden
        
        #line 150 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write(" = 0x");

        
        #line default
        #line hidden
        
        #line 150 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(item.Value.ToString("X")));

        
        #line default
        #line hidden
        
        #line 150 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write("\r\n");

        
        #line default
        #line hidden
        
        #line 151 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"

		}
	}

        
        #line default
        #line hidden
        
        #line 155 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(info.Name));

        
        #line default
        #line hidden
        
        #line 155 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write(" = unchecked((int)");

        
        #line default
        #line hidden
        
        #line 155 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(info.Value.Value));

        
        #line default
        #line hidden
        
        #line 155 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write("),\r\n");

        
        #line default
        #line hidden
        
        #line 156 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"

}

        
        #line default
        #line hidden
        
        #line 161 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"

/*
	/// <summary>
	/// 
	/// </summary>
	public class ClassName
	{
	}
*/

protected void Begin(string accessor, string type, string name, string interfaces = null)
{
	this.PushIndent("	");

        
        #line default
        #line hidden
        
        #line 175 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(accessor));

        
        #line default
        #line hidden
        
        #line 175 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write(" ");

        
        #line default
        #line hidden
        
        #line 175 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(type));

        
        #line default
        #line hidden
        
        #line 175 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write(" ");

        
        #line default
        #line hidden
        
        #line 175 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(name));

        
        #line default
        #line hidden
        
        #line 175 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture((interfaces == null ? string.Empty : (" : " + interfaces))));

        
        #line default
        #line hidden
        
        #line 175 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write("\r\n{\r\n");

        
        #line default
        #line hidden
        
        #line 177 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"

}
protected void End()
{

        
        #line default
        #line hidden
        
        #line 181 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write("}\r\n");

        
        #line default
        #line hidden
        
        #line 183 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"

	this.PopIndent();
}

        
        #line default
        #line hidden
        
        #line 190 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"

/*
	/// <summary>
	/// 
	/// </summary>
	/// <param name="other"></param>
	/// <returns></returns>
	[DllImport("opengl32")]
	public static extern void glVertex2d(double x, double y);
*/
protected void WriteCommand(CommandInfo info)
{

        
        #line default
        #line hidden
        
        #line 203 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture("// " + CommandToString( info.Command )));

        
        #line default
        #line hidden
        
        #line 203 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write("\r\npublic readonly ");

        
        #line default
        #line hidden
        
        #line 204 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(info.Method.Name));

        
        #line default
        #line hidden
        
        #line 204 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write("Delegate ");

        
        #line default
        #line hidden
        
        #line 204 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(info.Method.Name));

        
        #line default
        #line hidden
        
        #line 204 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write(";\r\n");

        
        #line default
        #line hidden
        
        #line 205 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"

}

        
        #line default
        #line hidden
        
        #line 210 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"

/*
	/// <summary>
	/// 
	/// </summary>
	/// <param name="other"></param>
	/// <returns></returns>
	[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public delegate void MyUnmanagedDelegate(float a, float b, float* result);
*/
protected void WriteCommandDelegate(CommandInfo info)
{
	var parameter = string.Join ( ", ", (from item in info.Parameters select (item.Type + " " + item.Name)) );

        
        #line default
        #line hidden
        
        #line 224 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture("// " + CommandToString( info.Command )));

        
        #line default
        #line hidden
        
        #line 224 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write("\r\n[SuppressUnmanagedCodeSecurity/*, UnmanagedFunctionPointer(CallingConvention.Cd" +
        "ecl)*/]\r\npublic delegate ");

        
        #line default
        #line hidden
        
        #line 226 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(info.Method.Type));

        
        #line default
        #line hidden
        
        #line 226 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write(" ");

        
        #line default
        #line hidden
        
        #line 226 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(info.Method.Name));

        
        #line default
        #line hidden
        
        #line 226 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write("Delegate (");

        
        #line default
        #line hidden
        
        #line 226 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(parameter));

        
        #line default
        #line hidden
        
        #line 226 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write(");\r\n");

        
        #line default
        #line hidden
        
        #line 227 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"

}

        
        #line default
        #line hidden
        
        #line 232 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"

protected void WriteLoadCommandDelegate(CommandInfo info)
{

        
        #line default
        #line hidden
        
        #line 235 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write("resolver.LoadHandle (\"");

        
        #line default
        #line hidden
        
        #line 236 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(info.Command.Prototype.Declaration.Name));

        
        #line default
        #line hidden
        
        #line 236 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write("\", out ");

        
        #line default
        #line hidden
        
        #line 236 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(info.Method.Name));

        
        #line default
        #line hidden
        
        #line 236 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"
this.Write(");\r\n");

        
        #line default
        #line hidden
        
        #line 237 "C:\Projects\Crow.Framework\Crow.Graphics.OpenGl.SpecGen\Templates\GlBindingTemplate.tt"

}

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class GlBindingTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
